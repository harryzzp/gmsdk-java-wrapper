/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}


/* i文件中（例如变量类型）使用到的头文件 */
#include "gmtrade.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "gmtrade_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_LEN_1TRADE_1SYMBOL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)LEN_TRADE_SYMBOL;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_LEN_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)LEN_ID;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_LEN_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)LEN_NAME;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_LEN_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)LEN_INFO;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderStatus_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderStatus)OrderStatus_Unknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderStatus_1New_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderStatus)OrderStatus_New;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderStatus_1PartiallyFilled_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderStatus)OrderStatus_PartiallyFilled;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderStatus_1Filled_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderStatus)OrderStatus_Filled;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderStatus_1DoneForDay_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderStatus)OrderStatus_DoneForDay;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderStatus_1Canceled_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderStatus)OrderStatus_Canceled;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderStatus_1PendingCancel_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderStatus)OrderStatus_PendingCancel;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderStatus_1Stopped_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderStatus)OrderStatus_Stopped;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderStatus_1Rejected_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderStatus)OrderStatus_Rejected;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderStatus_1Suspended_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderStatus)OrderStatus_Suspended;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderStatus_1PendingNew_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderStatus)OrderStatus_PendingNew;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderStatus_1Calculated_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderStatus)OrderStatus_Calculated;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderStatus_1Expired_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderStatus)OrderStatus_Expired;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderStatus_1AcceptedForBidding_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderStatus)OrderStatus_AcceptedForBidding;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderStatus_1PendingReplace_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderStatus)OrderStatus_PendingReplace;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_Unknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1New_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_New;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1DoneForDay_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_DoneForDay;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1Canceled_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_Canceled;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1PendingCancel_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_PendingCancel;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1Stopped_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_Stopped;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1Rejected_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_Rejected;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1Suspended_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_Suspended;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1PendingNew_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_PendingNew;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1Calculated_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_Calculated;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1Expired_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_Expired;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1Restated_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_Restated;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1PendingReplace_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_PendingReplace;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1Trade_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_Trade;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1TradeCorrect_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_TradeCorrect;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1TradeCancel_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_TradeCancel;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1OrderStatus_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_OrderStatus;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecType_1CancelRejected_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ExecType result;
  
  (void)jenv;
  (void)jcls;
  result = (ExecType)ExecType_CancelRejected;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderRejectReason_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)OrderRejectReason_Unknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderRejectReason_1RiskRuleCheckFailed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)OrderRejectReason_RiskRuleCheckFailed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderRejectReason_1NoEnoughCash_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)OrderRejectReason_NoEnoughCash;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderRejectReason_1NoEnoughPosition_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)OrderRejectReason_NoEnoughPosition;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderRejectReason_1IllegalAccountId_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)OrderRejectReason_IllegalAccountId;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderRejectReason_1IllegalStrategyId_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)OrderRejectReason_IllegalStrategyId;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderRejectReason_1IllegalSymbol_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)OrderRejectReason_IllegalSymbol;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderRejectReason_1IllegalVolume_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)OrderRejectReason_IllegalVolume;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderRejectReason_1IllegalPrice_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)OrderRejectReason_IllegalPrice;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderRejectReason_1AccountDisabled_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)OrderRejectReason_AccountDisabled;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderRejectReason_1AccountDisconnected_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)OrderRejectReason_AccountDisconnected;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderRejectReason_1AccountLoggedout_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)OrderRejectReason_AccountLoggedout;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderRejectReason_1NotInTradingSession_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)OrderRejectReason_NotInTradingSession;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderRejectReason_1OrderTypeNotSupported_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)OrderRejectReason_OrderTypeNotSupported;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderRejectReason_1Throttle_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)OrderRejectReason_Throttle;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderRejectReason_1SymbolSusppended_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)OrderRejectReason_SymbolSusppended;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderRejectReason_1Internal_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)OrderRejectReason_Internal;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_CancelOrderRejectReason_1OrderFinalized_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)CancelOrderRejectReason_OrderFinalized;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_CancelOrderRejectReason_1UnknownOrder_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)CancelOrderRejectReason_UnknownOrder;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_CancelOrderRejectReason_1BrokerOption_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)CancelOrderRejectReason_BrokerOption;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_CancelOrderRejectReason_1AlreadyInPendingCancel_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderRejectReason)CancelOrderRejectReason_AlreadyInPendingCancel;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderSide_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderSide result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderSide)OrderSide_Unknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderSide_1Buy_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderSide result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderSide)OrderSide_Buy;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderSide_1Sell_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderSide result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderSide)OrderSide_Sell;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderType_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderType result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderType)OrderType_Unknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderType_1Limit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderType result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderType)OrderType_Limit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderType_1Market_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderType result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderType)OrderType_Market;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderType_1Stop_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderType result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderType)OrderType_Stop;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderDuration_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderDuration result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderDuration)OrderDuration_Unknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderDuration_1FAK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderDuration result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderDuration)OrderDuration_FAK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderDuration_1FOK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderDuration result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderDuration)OrderDuration_FOK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderDuration_1GFD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderDuration result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderDuration)OrderDuration_GFD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderDuration_1GFS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderDuration result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderDuration)OrderDuration_GFS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderDuration_1GTD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderDuration result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderDuration)OrderDuration_GTD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderDuration_1GTC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderDuration result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderDuration)OrderDuration_GTC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderDuration_1GFA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderDuration result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderDuration)OrderDuration_GFA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderQualifier_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderQualifier result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderQualifier)OrderQualifier_Unknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderQualifier_1BOC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderQualifier result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderQualifier)OrderQualifier_BOC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderQualifier_1BOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderQualifier result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderQualifier)OrderQualifier_BOP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderQualifier_1B5TC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderQualifier result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderQualifier)OrderQualifier_B5TC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderQualifier_1B5TL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OrderQualifier result;
  
  (void)jenv;
  (void)jcls;
  result = (OrderQualifier)OrderQualifier_B5TL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_PositionSide_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  PositionSide result;
  
  (void)jenv;
  (void)jcls;
  result = (PositionSide)PositionSide_Unknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_PositionSide_1Long_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  PositionSide result;
  
  (void)jenv;
  (void)jcls;
  result = (PositionSide)PositionSide_Long;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_PositionSide_1Short_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  PositionSide result;
  
  (void)jenv;
  (void)jcls;
  result = (PositionSide)PositionSide_Short;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_PositionEffect_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  PositionEffect result;
  
  (void)jenv;
  (void)jcls;
  result = (PositionEffect)PositionEffect_Unknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_PositionEffect_1Open_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  PositionEffect result;
  
  (void)jenv;
  (void)jcls;
  result = (PositionEffect)PositionEffect_Open;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_PositionEffect_1Close_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  PositionEffect result;
  
  (void)jenv;
  (void)jcls;
  result = (PositionEffect)PositionEffect_Close;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_PositionEffect_1CloseToday_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  PositionEffect result;
  
  (void)jenv;
  (void)jcls;
  result = (PositionEffect)PositionEffect_CloseToday;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_PositionEffect_1CloseYesterday_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  PositionEffect result;
  
  (void)jenv;
  (void)jcls;
  result = (PositionEffect)PositionEffect_CloseYesterday;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_CashPositionChangeReason_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CashPositionChangeReason result;
  
  (void)jenv;
  (void)jcls;
  result = (CashPositionChangeReason)CashPositionChangeReason_Unknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_CashPositionChangeReason_1Trade_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CashPositionChangeReason result;
  
  (void)jenv;
  (void)jcls;
  result = (CashPositionChangeReason)CashPositionChangeReason_Trade;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_CashPositionChangeReason_1Inout_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CashPositionChangeReason result;
  
  (void)jenv;
  (void)jcls;
  result = (CashPositionChangeReason)CashPositionChangeReason_Inout;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_CashPositionChangeReason_1Dividend_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CashPositionChangeReason result;
  
  (void)jenv;
  (void)jcls;
  result = (CashPositionChangeReason)CashPositionChangeReason_Dividend;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_State_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AccountState result;
  
  (void)jenv;
  (void)jcls;
  result = (AccountState)State_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_State_1CONNECTING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AccountState result;
  
  (void)jenv;
  (void)jcls;
  result = (AccountState)State_CONNECTING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_State_1CONNECTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AccountState result;
  
  (void)jenv;
  (void)jcls;
  result = (AccountState)State_CONNECTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_State_1LOGGEDIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AccountState result;
  
  (void)jenv;
  (void)jcls;
  result = (AccountState)State_LOGGEDIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_State_1DISCONNECTING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AccountState result;
  
  (void)jenv;
  (void)jcls;
  result = (AccountState)State_DISCONNECTING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_State_1DISCONNECTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AccountState result;
  
  (void)jenv;
  (void)jcls;
  result = (AccountState)State_DISCONNECTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_State_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AccountState result;
  
  (void)jenv;
  (void)jcls;
  result = (AccountState)State_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1strategy_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Order *arg1 = (Order *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->strategy_id, (const char *)arg2, LEN_ID-1);
      arg1->strategy_id[LEN_ID-1] = 0;
    } else {
      arg1->strategy_id[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1strategy_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (char *)(char *) ((arg1)->strategy_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1account_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Order *arg1 = (Order *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->account_id, (const char *)arg2, LEN_ID-1);
      arg1->account_id[LEN_ID-1] = 0;
    } else {
      arg1->account_id[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1account_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (char *)(char *) ((arg1)->account_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1account_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Order *arg1 = (Order *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->account_name, (const char *)arg2, LEN_NAME-1);
      arg1->account_name[LEN_NAME-1] = 0;
    } else {
      arg1->account_name[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1account_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (char *)(char *) ((arg1)->account_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1cl_1ord_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Order *arg1 = (Order *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->cl_ord_id, (const char *)arg2, LEN_ID-1);
      arg1->cl_ord_id[LEN_ID-1] = 0;
    } else {
      arg1->cl_ord_id[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1cl_1ord_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (char *)(char *) ((arg1)->cl_ord_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1order_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Order *arg1 = (Order *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->order_id, (const char *)arg2, LEN_ID-1);
      arg1->order_id[LEN_ID-1] = 0;
    } else {
      arg1->order_id[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1order_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (char *)(char *) ((arg1)->order_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1ex_1ord_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Order *arg1 = (Order *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ex_ord_id, (const char *)arg2, LEN_ID-1);
      arg1->ex_ord_id[LEN_ID-1] = 0;
    } else {
      arg1->ex_ord_id[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1ex_1ord_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (char *)(char *) ((arg1)->ex_ord_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1symbol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Order *arg1 = (Order *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->symbol, (const char *)arg2, LEN_TRADE_SYMBOL-1);
      arg1->symbol[LEN_TRADE_SYMBOL-1] = 0;
    } else {
      arg1->symbol[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1symbol_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (char *)(char *) ((arg1)->symbol);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1side_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Order *arg1 = (Order *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->side = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1side_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (int) ((arg1)->side);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1position_1effect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Order *arg1 = (Order *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->position_effect = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1position_1effect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (int) ((arg1)->position_effect);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1position_1side_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Order *arg1 = (Order *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->position_side = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1position_1side_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (int) ((arg1)->position_side);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1order_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Order *arg1 = (Order *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->order_type = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1order_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (int) ((arg1)->order_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1order_1duration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Order *arg1 = (Order *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->order_duration = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1order_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (int) ((arg1)->order_duration);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1order_1qualifier_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Order *arg1 = (Order *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->order_qualifier = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1order_1qualifier_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (int) ((arg1)->order_qualifier);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1order_1src_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Order *arg1 = (Order *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->order_src = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1order_1src_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (int) ((arg1)->order_src);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Order *arg1 = (Order *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (int) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1ord_1rej_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Order *arg1 = (Order *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ord_rej_reason = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1ord_1rej_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (int) ((arg1)->ord_rej_reason);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1ord_1rej_1reason_1detail_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Order *arg1 = (Order *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ord_rej_reason_detail, (const char *)arg2, LEN_INFO-1);
      arg1->ord_rej_reason_detail[LEN_INFO-1] = 0;
    } else {
      arg1->ord_rej_reason_detail[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1ord_1rej_1reason_1detail_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (char *)(char *) ((arg1)->ord_rej_reason_detail);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1price_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Order *arg1 = (Order *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->price = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1price_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (double) ((arg1)->price);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1stop_1price_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Order *arg1 = (Order *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->stop_price = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1stop_1price_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (double) ((arg1)->stop_price);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1order_1style_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Order *arg1 = (Order *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->order_style = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1order_1style_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (int) ((arg1)->order_style);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Order *arg1 = (Order *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->volume = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (long long) ((arg1)->volume);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Order *arg1 = (Order *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (double) ((arg1)->value);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1percent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Order *arg1 = (Order *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->percent = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1percent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (double) ((arg1)->percent);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1target_1volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Order *arg1 = (Order *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->target_volume = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1target_1volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (long long) ((arg1)->target_volume);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1target_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Order *arg1 = (Order *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->target_value = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1target_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (double) ((arg1)->target_value);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1target_1percent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Order *arg1 = (Order *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->target_percent = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1target_1percent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (double) ((arg1)->target_percent);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1filled_1volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Order *arg1 = (Order *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->filled_volume = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1filled_1volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (long long) ((arg1)->filled_volume);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1filled_1vwap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Order *arg1 = (Order *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->filled_vwap = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1filled_1vwap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (double) ((arg1)->filled_vwap);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1filled_1amount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Order *arg1 = (Order *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->filled_amount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1filled_1amount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (double) ((arg1)->filled_amount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1filled_1commission_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Order *arg1 = (Order *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->filled_commission = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1filled_1commission_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (double) ((arg1)->filled_commission);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1created_1at_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Order *arg1 = (Order *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->created_at = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1created_1at_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (long long) ((arg1)->created_at);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1updated_1at_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Order *arg1 = (Order *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->updated_at = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Order_1updated_1at_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Order *arg1 = (Order *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Order **)&jarg1; 
  result = (long long) ((arg1)->updated_at);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_new_1Order(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Order *)new Order();
  *(Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_delete_1Order(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Order *arg1 = (Order *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Order **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1strategy_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->strategy_id, (const char *)arg2, LEN_ID-1);
      arg1->strategy_id[LEN_ID-1] = 0;
    } else {
      arg1->strategy_id[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1strategy_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (char *)(char *) ((arg1)->strategy_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1account_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->account_id, (const char *)arg2, LEN_ID-1);
      arg1->account_id[LEN_ID-1] = 0;
    } else {
      arg1->account_id[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1account_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (char *)(char *) ((arg1)->account_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1account_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->account_name, (const char *)arg2, LEN_NAME-1);
      arg1->account_name[LEN_NAME-1] = 0;
    } else {
      arg1->account_name[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1account_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (char *)(char *) ((arg1)->account_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1cl_1ord_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->cl_ord_id, (const char *)arg2, LEN_ID-1);
      arg1->cl_ord_id[LEN_ID-1] = 0;
    } else {
      arg1->cl_ord_id[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1cl_1ord_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (char *)(char *) ((arg1)->cl_ord_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1order_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->order_id, (const char *)arg2, LEN_ID-1);
      arg1->order_id[LEN_ID-1] = 0;
    } else {
      arg1->order_id[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1order_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (char *)(char *) ((arg1)->order_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1exec_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->exec_id, (const char *)arg2, LEN_ID-1);
      arg1->exec_id[LEN_ID-1] = 0;
    } else {
      arg1->exec_id[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1exec_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (char *)(char *) ((arg1)->exec_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1symbol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->symbol, (const char *)arg2, LEN_TRADE_SYMBOL-1);
      arg1->symbol[LEN_TRADE_SYMBOL-1] = 0;
    } else {
      arg1->symbol[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1symbol_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (char *)(char *) ((arg1)->symbol);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1position_1effect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->position_effect = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1position_1effect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (int) ((arg1)->position_effect);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1side_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->side = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1side_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (int) ((arg1)->side);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1ord_1rej_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ord_rej_reason = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1ord_1rej_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (int) ((arg1)->ord_rej_reason);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1ord_1rej_1reason_1detail_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ord_rej_reason_detail, (const char *)arg2, LEN_INFO-1);
      arg1->ord_rej_reason_detail[LEN_INFO-1] = 0;
    } else {
      arg1->ord_rej_reason_detail[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1ord_1rej_1reason_1detail_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (char *)(char *) ((arg1)->ord_rej_reason_detail);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1exec_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->exec_type = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1exec_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (int) ((arg1)->exec_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1price_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->price = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1price_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (double) ((arg1)->price);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->volume = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (long long) ((arg1)->volume);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1amount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->amount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1amount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (double) ((arg1)->amount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1commission_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->commission = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1commission_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (double) ((arg1)->commission);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1cost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->cost = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1cost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (double) ((arg1)->cost);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1created_1at_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->created_at = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRpt_1created_1at_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExecRpt **)&jarg1; 
  result = (long long) ((arg1)->created_at);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_new_1ExecRpt(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ExecRpt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ExecRpt *)new ExecRpt();
  *(ExecRpt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_delete_1ExecRpt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ExecRpt *arg1 = (ExecRpt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ExecRpt **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1account_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->account_id, (const char *)arg2, LEN_ID-1);
      arg1->account_id[LEN_ID-1] = 0;
    } else {
      arg1->account_id[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1account_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (char *)(char *) ((arg1)->account_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1account_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->account_name, (const char *)arg2, LEN_NAME-1);
      arg1->account_name[LEN_NAME-1] = 0;
    } else {
      arg1->account_name[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1account_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (char *)(char *) ((arg1)->account_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1currency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->currency = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1currency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (int) ((arg1)->currency);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1nav_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->nav = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1nav_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (double) ((arg1)->nav);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1pnl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->pnl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1pnl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (double) ((arg1)->pnl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1fpnl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fpnl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1fpnl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (double) ((arg1)->fpnl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1frozen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->frozen = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1frozen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (double) ((arg1)->frozen);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1order_1frozen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->order_frozen = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1order_1frozen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (double) ((arg1)->order_frozen);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1available_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->available = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1available_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (double) ((arg1)->available);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1balance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->balance = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1balance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (double) ((arg1)->balance);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1cum_1inout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->cum_inout = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1cum_1inout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (double) ((arg1)->cum_inout);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1cum_1trade_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->cum_trade = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1cum_1trade_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (double) ((arg1)->cum_trade);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1cum_1pnl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->cum_pnl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1cum_1pnl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (double) ((arg1)->cum_pnl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1cum_1commission_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->cum_commission = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1cum_1commission_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (double) ((arg1)->cum_commission);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1last_1trade_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->last_trade = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1last_1trade_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (double) ((arg1)->last_trade);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1last_1pnl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->last_pnl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1last_1pnl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (double) ((arg1)->last_pnl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1last_1commission_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->last_commission = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1last_1commission_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (double) ((arg1)->last_commission);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1last_1inout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->last_inout = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1last_1inout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (double) ((arg1)->last_inout);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1change_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->change_reason = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1change_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (int) ((arg1)->change_reason);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1change_1event_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->change_event_id, (const char *)arg2, LEN_ID-1);
      arg1->change_event_id[LEN_ID-1] = 0;
    } else {
      arg1->change_event_id[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1change_1event_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (char *)(char *) ((arg1)->change_event_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1created_1at_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->created_at = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1created_1at_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (long long) ((arg1)->created_at);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1updated_1at_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Cash *arg1 = (Cash *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->updated_at = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Cash_1updated_1at_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Cash *arg1 = (Cash *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Cash **)&jarg1; 
  result = (long long) ((arg1)->updated_at);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_new_1Cash(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Cash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Cash *)new Cash();
  *(Cash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_delete_1Cash(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Cash *arg1 = (Cash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Cash **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1account_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Position *arg1 = (Position *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->account_id, (const char *)arg2, LEN_ID-1);
      arg1->account_id[LEN_ID-1] = 0;
    } else {
      arg1->account_id[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1account_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (char *)(char *) ((arg1)->account_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1account_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Position *arg1 = (Position *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->account_name, (const char *)arg2, LEN_NAME-1);
      arg1->account_name[LEN_NAME-1] = 0;
    } else {
      arg1->account_name[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1account_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (char *)(char *) ((arg1)->account_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1symbol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Position *arg1 = (Position *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->symbol, (const char *)arg2, LEN_TRADE_SYMBOL-1);
      arg1->symbol[LEN_TRADE_SYMBOL-1] = 0;
    } else {
      arg1->symbol[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1symbol_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (char *)(char *) ((arg1)->symbol);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1side_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Position *arg1 = (Position *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->side = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1side_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (int) ((arg1)->side);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Position *arg1 = (Position *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->volume = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (long long) ((arg1)->volume);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1volume_1today_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Position *arg1 = (Position *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->volume_today = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1volume_1today_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (long long) ((arg1)->volume_today);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1vwap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Position *arg1 = (Position *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vwap = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1vwap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (double) ((arg1)->vwap);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1amount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Position *arg1 = (Position *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->amount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1amount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (double) ((arg1)->amount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1price_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Position *arg1 = (Position *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->price = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1price_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (double) ((arg1)->price);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1fpnl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Position *arg1 = (Position *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fpnl = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1fpnl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (double) ((arg1)->fpnl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1cost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Position *arg1 = (Position *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->cost = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1cost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (double) ((arg1)->cost);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1order_1frozen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Position *arg1 = (Position *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->order_frozen = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1order_1frozen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (long long) ((arg1)->order_frozen);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1order_1frozen_1today_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Position *arg1 = (Position *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->order_frozen_today = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1order_1frozen_1today_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (long long) ((arg1)->order_frozen_today);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1available_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Position *arg1 = (Position *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->available = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1available_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (long long) ((arg1)->available);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1available_1today_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Position *arg1 = (Position *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->available_today = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1available_1today_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (long long) ((arg1)->available_today);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1last_1price_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Position *arg1 = (Position *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->last_price = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1last_1price_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (double) ((arg1)->last_price);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1last_1volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Position *arg1 = (Position *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->last_volume = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1last_1volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (long long) ((arg1)->last_volume);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1last_1inout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Position *arg1 = (Position *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->last_inout = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1last_1inout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (long long) ((arg1)->last_inout);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1change_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Position *arg1 = (Position *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->change_reason = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1change_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (int) ((arg1)->change_reason);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1change_1event_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Position *arg1 = (Position *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->change_event_id, (const char *)arg2, LEN_ID-1);
      arg1->change_event_id[LEN_ID-1] = 0;
    } else {
      arg1->change_event_id[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1change_1event_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (char *)(char *) ((arg1)->change_event_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1has_1dividend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Position *arg1 = (Position *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->has_dividend = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1has_1dividend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (int) ((arg1)->has_dividend);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1created_1at_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Position *arg1 = (Position *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->created_at = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1created_1at_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (long long) ((arg1)->created_at);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1updated_1at_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Position *arg1 = (Position *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->updated_at = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Position_1updated_1at_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Position *arg1 = (Position *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Position **)&jarg1; 
  result = (long long) ((arg1)->updated_at);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_new_1Position(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Position *)new Position();
  *(Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_delete_1Position(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Position *arg1 = (Position *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Position **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Account_1account_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Account *arg1 = (Account *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Account **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->account_id, (const char *)arg2, LEN_ID-1);
      arg1->account_id[LEN_ID-1] = 0;
    } else {
      arg1->account_id[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Account_1account_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Account *arg1 = (Account *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Account **)&jarg1; 
  result = (char *)(char *) ((arg1)->account_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Account_1account_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Account *arg1 = (Account *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Account **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->account_name, (const char *)arg2, LEN_NAME-1);
      arg1->account_name[LEN_NAME-1] = 0;
    } else {
      arg1->account_name[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Account_1account_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Account *arg1 = (Account *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Account **)&jarg1; 
  result = (char *)(char *) ((arg1)->account_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Account_1title_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Account *arg1 = (Account *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Account **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->title, (const char *)arg2, LEN_NAME-1);
      arg1->title[LEN_NAME-1] = 0;
    } else {
      arg1->title[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Account_1title_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Account *arg1 = (Account *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Account **)&jarg1; 
  result = (char *)(char *) ((arg1)->title);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Account_1intro_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Account *arg1 = (Account *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Account **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->intro, (const char *)arg2, LEN_INFO-1);
      arg1->intro[LEN_INFO-1] = 0;
    } else {
      arg1->intro[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Account_1intro_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Account *arg1 = (Account *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Account **)&jarg1; 
  result = (char *)(char *) ((arg1)->intro);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Account_1comment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Account *arg1 = (Account *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Account **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->comment, (const char *)arg2, LEN_INFO-1);
      arg1->comment[LEN_INFO-1] = 0;
    } else {
      arg1->comment[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Account_1comment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Account *arg1 = (Account *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Account **)&jarg1; 
  result = (char *)(char *) ((arg1)->comment);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_new_1Account(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Account *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Account *)new Account();
  *(Account **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_delete_1Account(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Account *arg1 = (Account *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Account **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_AccountStatus_1account_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  AccountStatus *arg1 = (AccountStatus *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AccountStatus **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->account_id, (const char *)arg2, LEN_ID-1);
      arg1->account_id[LEN_ID-1] = 0;
    } else {
      arg1->account_id[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_AccountStatus_1account_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AccountStatus *arg1 = (AccountStatus *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AccountStatus **)&jarg1; 
  result = (char *)(char *) ((arg1)->account_id);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_AccountStatus_1account_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  AccountStatus *arg1 = (AccountStatus *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AccountStatus **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->account_name, (const char *)arg2, LEN_NAME-1);
      arg1->account_name[LEN_NAME-1] = 0;
    } else {
      arg1->account_name[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_AccountStatus_1account_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AccountStatus *arg1 = (AccountStatus *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AccountStatus **)&jarg1; 
  result = (char *)(char *) ((arg1)->account_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_AccountStatus_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AccountStatus *arg1 = (AccountStatus *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AccountStatus **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_AccountStatus_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AccountStatus *arg1 = (AccountStatus *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AccountStatus **)&jarg1; 
  result = (int) ((arg1)->state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_AccountStatus_1error_1code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AccountStatus *arg1 = (AccountStatus *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AccountStatus **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->error_code = arg2;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_AccountStatus_1error_1code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AccountStatus *arg1 = (AccountStatus *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AccountStatus **)&jarg1; 
  result = (int) ((arg1)->error_code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_AccountStatus_1error_1msg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  AccountStatus *arg1 = (AccountStatus *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AccountStatus **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->error_msg, (const char *)arg2, LEN_INFO-1);
      arg1->error_msg[LEN_INFO-1] = 0;
    } else {
      arg1->error_msg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_ft_api_gm_td_gmtradeJNI_AccountStatus_1error_1msg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AccountStatus *arg1 = (AccountStatus *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AccountStatus **)&jarg1; 
  result = (char *)(char *) ((arg1)->error_msg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_new_1AccountStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AccountStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AccountStatus *)new AccountStatus();
  *(AccountStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_delete_1AccountStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AccountStatus *arg1 = (AccountStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AccountStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_new_1Trade_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  gmtrade::Trade *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (gmtrade::Trade *)new gmtrade::Trade((char const *)arg1);
  *(gmtrade::Trade **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_new_1Trade_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  gmtrade::Trade *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (gmtrade::Trade *)new gmtrade::Trade();
  *(gmtrade::Trade **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_delete_1Trade(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  result = (int)(arg1)->start();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1set_1token(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->set_token((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1set_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->set_endpoint((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1login(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->login((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1volume_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jdouble jarg7, jstring jarg8) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  char *arg8 = (char *) 0 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  result = (arg1)->order_volume((char const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1volume_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  result = (arg1)->order_volume((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1volume_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (arg1)->order_volume((char const *)arg2,arg3,arg4,arg5,arg6);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1value_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jint jarg4, jint jarg5, jint jarg6, jdouble jarg7, jstring jarg8) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  char *arg8 = (char *) 0 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  result = (arg1)->order_value((char const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1value_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jint jarg4, jint jarg5, jint jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  result = (arg1)->order_value((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1value_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (arg1)->order_value((char const *)arg2,arg3,arg4,arg5,arg6);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1percent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jint jarg4, jint jarg5, jint jarg6, jdouble jarg7, jstring jarg8) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  char *arg8 = (char *) 0 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  result = (arg1)->order_percent((char const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1percent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jint jarg4, jint jarg5, jint jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  result = (arg1)->order_percent((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1percent_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (arg1)->order_percent((char const *)arg2,arg3,arg4,arg5,arg6);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1target_1volume_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jdouble jarg6, jstring jarg7) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  char *arg7 = (char *) 0 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  result = (arg1)->order_target_volume((char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1target_1volume_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  result = (arg1)->order_target_volume((char const *)arg2,arg3,arg4,arg5,arg6);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1target_1volume_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (arg1)->order_target_volume((char const *)arg2,arg3,arg4,arg5);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1target_1value_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jint jarg4, jint jarg5, jdouble jarg6, jstring jarg7) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  char *arg7 = (char *) 0 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  result = (arg1)->order_target_value((char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1target_1value_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jint jarg4, jint jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  result = (arg1)->order_target_value((char const *)arg2,arg3,arg4,arg5,arg6);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1target_1value_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (arg1)->order_target_value((char const *)arg2,arg3,arg4,arg5);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1target_1percent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jint jarg4, jint jarg5, jdouble jarg6, jstring jarg7) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  char *arg7 = (char *) 0 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  result = (arg1)->order_target_percent((char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1target_1percent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jint jarg4, jint jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  result = (arg1)->order_target_percent((char const *)arg2,arg3,arg4,arg5,arg6);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1target_1percent_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (arg1)->order_target_percent((char const *)arg2,arg3,arg4,arg5);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1close_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  gmtrade::DataArray< Order > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  result = (gmtrade::DataArray< Order > *)(arg1)->order_close_all();
  *(gmtrade::DataArray< Order > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1cancel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->order_cancel((char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1cancel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->order_cancel((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1order_1cancel_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  result = (int)(arg1)->order_cancel_all();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1place_1order_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jdouble jarg7, jint jarg8, jint jarg9, jdouble jarg10, jstring jarg11) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  int arg8 ;
  int arg9 ;
  double arg10 ;
  char *arg11 = (char *) 0 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (double)jarg10; 
  arg11 = 0;
  if (jarg11) {
    arg11 = (char *)jenv->GetStringUTFChars(jarg11, 0);
    if (!arg11) return 0;
  }
  result = (arg1)->place_order((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,(char const *)arg11);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg11) jenv->ReleaseStringUTFChars(jarg11, (const char *)arg11);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1place_1order_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jdouble jarg7, jint jarg8, jint jarg9, jdouble jarg10) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  int arg8 ;
  int arg9 ;
  double arg10 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (double)jarg10; 
  result = (arg1)->place_order((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1place_1order_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jdouble jarg7, jint jarg8, jint jarg9) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  int arg8 ;
  int arg9 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  result = (arg1)->place_order((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1place_1order_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jdouble jarg7, jint jarg8) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  int arg8 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (int)jarg8; 
  result = (arg1)->place_order((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1place_1order_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  result = (arg1)->place_order((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1place_1order_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (arg1)->place_order((char const *)arg2,arg3,arg4,arg5,arg6);
  *(Order **)&jresult = new Order((const Order &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1get_1cash_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  Cash *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = *(Cash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Cash & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->get_cash(*arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1get_1cash_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  Cash *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = *(Cash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Cash & reference is null");
    return 0;
  } 
  result = (int)(arg1)->get_cash(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1get_1orders_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  gmtrade::DataArray< Order > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (gmtrade::DataArray< Order > *)(arg1)->get_orders((char const *)arg2);
  *(gmtrade::DataArray< Order > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1get_1orders_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  gmtrade::DataArray< Order > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  result = (gmtrade::DataArray< Order > *)(arg1)->get_orders();
  *(gmtrade::DataArray< Order > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1get_1unfinished_1orders_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  gmtrade::DataArray< Order > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (gmtrade::DataArray< Order > *)(arg1)->get_unfinished_orders((char const *)arg2);
  *(gmtrade::DataArray< Order > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1get_1unfinished_1orders_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  gmtrade::DataArray< Order > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  result = (gmtrade::DataArray< Order > *)(arg1)->get_unfinished_orders();
  *(gmtrade::DataArray< Order > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1get_1execution_1reports_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  gmtrade::DataArray< ExecRpt > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (gmtrade::DataArray< ExecRpt > *)(arg1)->get_execution_reports((char const *)arg2);
  *(gmtrade::DataArray< ExecRpt > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1get_1execution_1reports_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  gmtrade::DataArray< ExecRpt > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  result = (gmtrade::DataArray< ExecRpt > *)(arg1)->get_execution_reports();
  *(gmtrade::DataArray< ExecRpt > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1get_1position_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  char *arg2 = (char *) 0 ;
  gmtrade::DataArray< Position > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (gmtrade::DataArray< Position > *)(arg1)->get_position((char const *)arg2);
  *(gmtrade::DataArray< Position > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1get_1position_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  gmtrade::DataArray< Position > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  result = (gmtrade::DataArray< Position > *)(arg1)->get_position();
  *(gmtrade::DataArray< Position > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1on_1order_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  Order *arg2 = (Order *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = *(Order **)&jarg2; 
  (arg1)->on_order_status(arg2);
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1on_1execution_1report(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  ExecRpt *arg2 = (ExecRpt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = *(ExecRpt **)&jarg2; 
  (arg1)->on_execution_report(arg2);
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1on_1account_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  AccountStatus *arg2 = (AccountStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = *(AccountStatus **)&jarg2; 
  (arg1)->on_account_status(arg2);
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1on_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->on_error(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1on_1trade_1data_1connected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  (arg1)->on_trade_data_connected();
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_Trade_1on_1trade_1data_1disconnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  gmtrade::Trade *arg1 = (gmtrade::Trade *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::Trade **)&jarg1; 
  (arg1)->on_trade_data_disconnected();
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRptDataArray_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  gmtrade::DataArray< ExecRpt > *arg1 = (gmtrade::DataArray< ExecRpt > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::DataArray< ExecRpt > **)&jarg1; 
  result = (int)(arg1)->status();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRptDataArray_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gmtrade::DataArray< ExecRpt > *arg1 = (gmtrade::DataArray< ExecRpt > *) 0 ;
  ExecRpt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::DataArray< ExecRpt > **)&jarg1; 
  result = (ExecRpt *)(arg1)->data();
  *(ExecRpt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRptDataArray_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  gmtrade::DataArray< ExecRpt > *arg1 = (gmtrade::DataArray< ExecRpt > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::DataArray< ExecRpt > **)&jarg1; 
  result = (int)(arg1)->count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRptDataArray_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  gmtrade::DataArray< ExecRpt > *arg1 = (gmtrade::DataArray< ExecRpt > *) 0 ;
  int arg2 ;
  ExecRpt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::DataArray< ExecRpt > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ExecRpt *) &(arg1)->at(arg2);
  *(ExecRpt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_ExecRptDataArray_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  gmtrade::DataArray< ExecRpt > *arg1 = (gmtrade::DataArray< ExecRpt > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::DataArray< ExecRpt > **)&jarg1; 
  (arg1)->release();
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_delete_1ExecRptDataArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  gmtrade::DataArray< ExecRpt > *arg1 = (gmtrade::DataArray< ExecRpt > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(gmtrade::DataArray< ExecRpt > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderDataArray_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  gmtrade::DataArray< Order > *arg1 = (gmtrade::DataArray< Order > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::DataArray< Order > **)&jarg1; 
  result = (int)(arg1)->status();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderDataArray_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gmtrade::DataArray< Order > *arg1 = (gmtrade::DataArray< Order > *) 0 ;
  Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::DataArray< Order > **)&jarg1; 
  result = (Order *)(arg1)->data();
  *(Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderDataArray_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  gmtrade::DataArray< Order > *arg1 = (gmtrade::DataArray< Order > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::DataArray< Order > **)&jarg1; 
  result = (int)(arg1)->count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderDataArray_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  gmtrade::DataArray< Order > *arg1 = (gmtrade::DataArray< Order > *) 0 ;
  int arg2 ;
  Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::DataArray< Order > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Order *) &(arg1)->at(arg2);
  *(Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_OrderDataArray_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  gmtrade::DataArray< Order > *arg1 = (gmtrade::DataArray< Order > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::DataArray< Order > **)&jarg1; 
  (arg1)->release();
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_delete_1OrderDataArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  gmtrade::DataArray< Order > *arg1 = (gmtrade::DataArray< Order > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(gmtrade::DataArray< Order > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_PositionDataArray_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  gmtrade::DataArray< Position > *arg1 = (gmtrade::DataArray< Position > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::DataArray< Position > **)&jarg1; 
  result = (int)(arg1)->status();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_PositionDataArray_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gmtrade::DataArray< Position > *arg1 = (gmtrade::DataArray< Position > *) 0 ;
  Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::DataArray< Position > **)&jarg1; 
  result = (Position *)(arg1)->data();
  *(Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_ft_api_gm_td_gmtradeJNI_PositionDataArray_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  gmtrade::DataArray< Position > *arg1 = (gmtrade::DataArray< Position > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::DataArray< Position > **)&jarg1; 
  result = (int)(arg1)->count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ft_api_gm_td_gmtradeJNI_PositionDataArray_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  gmtrade::DataArray< Position > *arg1 = (gmtrade::DataArray< Position > *) 0 ;
  int arg2 ;
  Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::DataArray< Position > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Position *) &(arg1)->at(arg2);
  *(Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_PositionDataArray_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  gmtrade::DataArray< Position > *arg1 = (gmtrade::DataArray< Position > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gmtrade::DataArray< Position > **)&jarg1; 
  (arg1)->release();
}


SWIGEXPORT void JNICALL Java_io_ft_api_gm_td_gmtradeJNI_delete_1PositionDataArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  gmtrade::DataArray< Position > *arg1 = (gmtrade::DataArray< Position > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(gmtrade::DataArray< Position > **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

